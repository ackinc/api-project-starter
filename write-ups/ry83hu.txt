Normally, I would call `res.send(...)` before calling `sendVerificationEmail`,
  however, doing so causes a strange uncaughtPromiseRejection
  when running tests via jest.
The cause seems to be a race condition or circular dependency when
  evaluating `require('pug')` in the exports.pug function in consolidate.js,
  a dependency of the email-templates package.
The `require('pug')` expression was evaluating to `{}` instead of the actual
  exported object of the pug package when running tests.

New knowledge
The error seems to be happening because this piece of code
  runs *after* all jest tests have completed, and jest seems to be
  "tearing down" imported modules before the code in consolidate.js runs.
If I add a delay to the tests so that they do *not* complete before this code
  runs, the uncaughtPromiseRejection does not occur
`require.cache` seems to become an empty object after tests are done

New knowledge
Apparently, jest maintains its own cache, separate from require.cache. See:
  https://github.com/facebook/jest/issues/5741
  https://github.com/facebook/jest/issues/6725
  https://github.com/facebook/jest/pull/9841
This is consistent with my findings from the `require.cache` check at breakpoints
  experiment. After tests are done, `require.cache` has no key for pug, so
  `require('pug')` should just cause the module to be re-imported. However,
  `require('pug')` instead evaluated to `{}`
